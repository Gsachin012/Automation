<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="2" ignored="0" total="4" passed="2">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="101971" started-at="2023-02-03T08:32:29 IST" finished-at="2023-02-03T08:34:11 IST">
    <groups>
    </groups>
    <test name="Test" duration-ms="101971" started-at="2023-02-03T08:32:29 IST" finished-at="2023-02-03T08:34:11 IST">
      <class name="tests.LoginTest">
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:tests.LoginTest@1e965684]" name="beforeTest" is-config="true" duration-ms="12" started-at="2023-02-03T08:32:29 IST" finished-at="2023-02-03T08:32:29 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeMethod(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@1e965684]" name="beforeMethod" is-config="true" duration-ms="22572" started-at="2023-02-03T08:32:29 IST" finished-at="2023-02-03T08:32:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=LoginTest.invalidLogin()[pri:0, instance:tests.LoginTest@1e965684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="invalidLogin()[pri:0, instance:tests.LoginTest@1e965684]" name="invalidLogin" duration-ms="3028" started-at="2023-02-03T08:32:52 IST" finished-at="2023-02-03T08:32:55 IST">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Invalid credentials1] but found [Invalid credentials]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Invalid credentials1] but found [Invalid credentials]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.assertEqualsImpl(Assert.java:136)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:575)
at org.testng.Assert.assertEquals(Assert.java:585)
at tests.LoginTest.invalidLogin(LoginTest.java:42)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1259)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidLogin -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@1e965684]" name="afterMethod" is-config="true" duration-ms="901" started-at="2023-02-03T08:32:55 IST" finished-at="2023-02-03T08:32:56 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=invalidLogin status=FAILURE method=LoginTest.invalidLogin()[pri:0, instance:tests.LoginTest@1e965684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@1e965684]" name="beforeMethod" is-config="true" duration-ms="21235" started-at="2023-02-03T08:32:56 IST" finished-at="2023-02-03T08:33:17 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=LoginTest.loginTest()[pri:0, instance:tests.LoginTest@1e965684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="loginTest()[pri:0, instance:tests.LoginTest@1e965684]" name="loginTest" duration-ms="2870" started-at="2023-02-03T08:33:17 IST" finished-at="2023-02-03T08:33:20 IST">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Paul Collings1] but found [Paul Collings]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Paul Collings1] but found [Paul Collings]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.assertEqualsImpl(Assert.java:136)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:575)
at org.testng.Assert.assertEquals(Assert.java:585)
at tests.LoginTest.loginTest(LoginTest.java:29)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1259)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@1e965684]" name="afterMethod" is-config="true" duration-ms="972" started-at="2023-02-03T08:33:20 IST" finished-at="2023-02-03T08:33:21 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginTest status=FAILURE method=LoginTest.loginTest()[pri:0, instance:tests.LoginTest@1e965684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@1e965684]" name="beforeMethod" is-config="true" duration-ms="24174" started-at="2023-02-03T08:33:21 IST" finished-at="2023-02-03T08:33:45 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=LoginTest.redirectToResetPasswordPageLinkPresent()[pri:0, instance:tests.LoginTest@1e965684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="redirectToResetPasswordPageLinkPresent()[pri:0, instance:tests.LoginTest@1e965684]" name="redirectToResetPasswordPageLinkPresent" duration-ms="10" started-at="2023-02-03T08:33:45 IST" finished-at="2023-02-03T08:33:45 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- redirectToResetPasswordPageLinkPresent -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@1e965684]" name="afterMethod" is-config="true" duration-ms="691" started-at="2023-02-03T08:33:45 IST" finished-at="2023-02-03T08:33:46 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=redirectToResetPasswordPageLinkPresent status=SUCCESS method=LoginTest.redirectToResetPasswordPageLinkPresent()[pri:0, instance:tests.LoginTest@1e965684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@1e965684]" name="beforeMethod" is-config="true" duration-ms="23197" started-at="2023-02-03T08:33:46 IST" finished-at="2023-02-03T08:34:09 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=LoginTest.navigateToResetPassword()[pri:0, instance:tests.LoginTest@1e965684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="navigateToResetPassword()[pri:0, instance:tests.LoginTest@1e965684]" name="navigateToResetPassword" duration-ms="1549" started-at="2023-02-03T08:34:09 IST" depends-on-methods="tests.LoginTest.redirectToResetPasswordPageLinkPresent" finished-at="2023-02-03T08:34:11 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateToResetPassword -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@1e965684]" name="afterMethod" is-config="true" duration-ms="723" started-at="2023-02-03T08:34:11 IST" finished-at="2023-02-03T08:34:11 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=navigateToResetPassword status=SUCCESS method=LoginTest.navigateToResetPassword()[pri:0, instance:tests.LoginTest@1e965684] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- tests.LoginTest -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
